name: Hprofile Actions
on: 
    - workflow_dispatch
    
env:
  REPO: "hprofile"
  REGION: "eu-west-3"
  CLUSTER: "h-profile-githubactions"
  SERVICE: "hprofile-task-def-service"
  CONTAINER_NAME: "hprofile"


jobs:
  Testing_and_SonarQube:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Set Java 11 and Cache Maven
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin'
         java-version: '11'
         cache: 'maven'

      - name: Build, Test, Checkstyle, and Coverage
        run: mvn clean verify checkstyle:checkstyle

      - name: Setup SonarQube
        uses: Warchant/setup-sonar-scanner@v9
        with:
          version: 7.2.0.5079

      # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src/
            -Dsonar.java.binaries=target/classes 
            -Dsonar.junit.reportsPath=target/surefire-reports/ 
            -Dsonar.jacoco.reportsPath=target/jacoco.exec 
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml 

    
  Build_and_push_docker_image:
    runs-on: ubuntu-latest
    needs: Testing_and_SonarQube
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Update sql cerdentials in application.properties
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.MY_SQL_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.MY_SQL_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.MYSQL_ENDPOINT }}/" src/main/resources/application.properties 

      - name: Docker ECR
        uses: appleboy/docker-ecr-action@v0.0.3
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.AWS_REGISTRY_URL }}
          repo: ${{ env.REPO }}
          region:  ${{ env.REGION }}
          tags: latest, ${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./




  Deploy_to_ECS:
    runs-on: ubuntu-latest
    needs: Build_and_push_docker_image
    steps:
      - name: Code checkout
        uses: actions/checkout@v4


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws-files/taskdeffile.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.AWS_REGISTRY_URL }}/${{ env.REPO }}:${{ github.run_number }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true   












        




